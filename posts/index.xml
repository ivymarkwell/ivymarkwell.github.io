<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Ivy Markwell</title>
        <link>https://ivymarkwell.github.io/posts/</link>
        <description>Recent content in Posts on Ivy Markwell</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Mon, 20 Apr 2020 12:00:00 -0500</lastBuildDate>
        <atom:link href="https://ivymarkwell.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Server Side Rendered HTML Using Phoenix Liveview</title>
            <link>https://ivymarkwell.github.io/posts/server-side-rendered-html-using-phoenix-liveview/</link>
            <pubDate>Mon, 20 Apr 2020 12:00:00 -0500</pubDate>
            
            <guid>https://ivymarkwell.github.io/posts/server-side-rendered-html-using-phoenix-liveview/</guid>
            <description>Server-side rendered HTML using Phoenix LiveView “LiveView” television
After attending the 2019 Lone Star Elixir conference in Austin, Texas and hearing the release of Phoenix LiveView announced, I decided I wanted to jump on the train of dabbling in LiveView. At the time, a lot of the examples being released were mini games which is what initially inspired me to recreate Minesweeper! After reading this you should understand what LiveView is, know some of the advantages and disadvantages of server side rendered HTML, and have an insight into how I used LiveView to build a clone of Minesweeper.</description>
            <content type="html"><![CDATA[

<h3 id="server-side-rendered-html-using-phoenix-liveview">Server-side rendered HTML using Phoenix LiveView</h3>

<p><img src="https://cdn-images-1.medium.com/max/1200/1*u3zVa7gitgik5q_OYOm_2g.jpeg" alt="" />
<span class="figcaption_hack">“LiveView” television</span></p>

<p>After attending the 2019 Lone Star Elixir conference in Austin, Texas and
hearing the release of Phoenix LiveView announced, I decided I wanted to jump on
the train of dabbling in LiveView. At the time, a lot of the examples being
released were mini games which is what initially inspired me to recreate
<a href="https://en.wikipedia.org/wiki/Minesweeper_(video_game)">Minesweeper</a>! After
reading this you should understand what LiveView is, know some of the advantages
and disadvantages of server side rendered HTML, and have an insight into how I
used LiveView to build a clone of Minesweeper.</p>

<h3 id="what-is-liveview">What is LiveView?</h3>

<p>LiveView is a <a href="https://hex.pm/packages/phoenix_live_view">hex library</a> for
managing application state and delivering server rendered HTML. To understand
the LiveView lifecycle, we’ll first take a look at the different
<a href="https://hexdocs.pm/phoenix/templates.html">templates</a> used by a LiveView
application.</p>

<p>There are <a href="https://hexdocs.pm/phoenix_live_view/Phoenix.LiveView.html#module-live-layouts">3
layouts</a>
(templates that render other templates) that are now in a Phoenix application:</p>

<ul>
<li>the root layout, <code>root.html.eex</code> — this is the layout shared between LiveView
and regular templates; this is rendered only on the initial request for the
application and then is used to render other templates</li>
<li>the app layout, <code>app.html.eex</code> — this is the default template in Phoenix that
lives outside of the LiveView library (meaning that it’s irrelevant in a
strictly LiveView application)</li>
<li>the live layout, <code>live.html.leex</code> — this is the LiveView template that has
access to the state of the application and is updated as apart of the LiveView
request life cycle</li>
</ul>

<p>LiveView starts by rendering the root layout on the initial request, and then
establishes a connection with the client through <a href="https://hexdocs.pm/phoenix/channels.html">Phoenix
Channels</a>. <code>phx-</code>
<a href="https://hexdocs.pm/phoenix_live_view/Phoenix.LiveView.html#module-bindings">bindings</a>
defined in the live template dictate when events are fired off by the client,
and then associated event handlers in the LiveView file will make appropriate
updates to the application state. Anytime the state of the application is
updated, LiveView will retrigger the <code>render</code> function that contains your live
layout, <code>index.html.leex</code> and rerender the page for the user. Meaning you got
yourself stateful Elixir rendered HTML.</p>

<p>Understanding LiveView for me really came down to these 3 files:</p>

<ul>
<li><code>router.ex</code> — where we assign our LiveView and define the root layout for our
application.</li>
</ul>

<p><img src="https://cdn-images-1.medium.com/max/800/1*9qd9hZihawqZYwLli5LaGw.png" alt="" />
<span class="figcaption_hack"><code>router.ex</code> file</span></p>

<ul>
<li><code>root.html.eex</code> — our root layout. This is the view that will be rendered on the
initial request of the application, create the client connection to the server
via web sockets (this happens specifically in the <code>app.js</code> script), and also
where the embeded LiveView layout will be rendered later using the <code>&lt;%=
@inner_content&gt;</code> tag.</li>
</ul>

<p><img src="https://cdn-images-1.medium.com/max/800/1*qetD22xhWGdQDQ44LkrrAA.png" alt="" />
<span class="figcaption_hack"><code>root.html.eex</code> file</span></p>

<ul>
<li><code>*_live.ex</code> — the “LiveView”. This is where the state of the application is
iterated on and where the LiveView layout, <code>.leex</code> template extension, gets
rendered using the <code>render/1</code> function. <code>render/1</code> can return inline HTML or an
<code>index.html.leex</code> file.</li>
</ul>

<p><img src="https://cdn-images-1.medium.com/max/800/1*w7skEA13qmFFGuO0-WYIQg.png" alt="" />
<span class="figcaption_hack"><code>*_live.ex</code> file</span></p>

<h3 id="recreating-minesweeper-and-implementing-event-handlers">Recreating Minesweeper and implementing event handlers</h3>

<p>(You can checkout and play my Minesweeper game
<a href="https://github.com/ivymarkwell/minesweeper">here</a>!)</p>

<p>The hardest part of writing my LiveView application had nothing to do with
LiveView; it was figuring out the Minesweeper logic itself (let me know if you
find any bugs!). All of the logic in some way involved implementing the event
handlers to track the current state of the game and display it to the user.</p>

<p>In the <code>*_live.ex</code> file diagram above, I briefly mentioned that the <code>mount/3</code>
function will initialize the state of the application. The state in a LiveView
is <a href="https://hexdocs.pm/phoenix_live_view/Phoenix.LiveView.html#module-assigns-and-liveeex-templates">stored in the socket as
assigns.</a>
Meaning that we can access a particular state key by using
<code>socket.assigns.state_key</code> (in the LiveView itself) or by accessing it in the
LiveView template with the notation <code>@state_key</code>.</p>

<p><img src="https://cdn-images-1.medium.com/max/800/1*8mujz9tJaEc_gDYH1xlqlg.png" alt="" />
<span class="figcaption_hack">Minesweeper!</span></p>

<p>Let’s go through an example! A really simple feature is that clicking the face
on the board will start a new game. In order to do this we need to add an event
binding in our Live layout, <code>index.html.leex</code>, that will listen to click events,
and also create the event handler in the LiveView, <code>minesweeper_live.ex</code> file
itself that will update the state of our application to start the new game.</p>

<pre><code>// index.html.leex, live layout file
&lt;span phx-click=&quot;restart-game&quot; class=&quot;status &lt;%= @game_status %&gt;&quot;/&gt;

// minesweeper_live.ex, the LiveView file
def handle_event(&quot;restart-game&quot;, _key, socket) do
   # randomly generate initial mines with random coordinates
   random_initial_x = Enum.random(1..@rows)
   random_initial_y = Enum.random(1..@columns)

   new_socket =
      socket
      |&gt; new_game(random_initial_x, random_initial_y)

   {:noreply, new_socket}
end
</code></pre>

<p>To keep things simple, we can determine whether we’ve started a new game by
looking only at the <code>@game_status</code> socket value. <code>@game_status</code> is one of the
many state keys that I implemented in my <code>mount/3</code> function that were
initialized when the page was rendered. If the <code>@game_status</code> value is “dead”,
meaning the user has lost the game, then we will see the frowny face. When the
user starts a new game, the value should get updated to “alive” and the face
should return to a happy face.</p>

<p>Using
<a href="https://hexdocs.pm/phoenix_live_view/Phoenix.LiveView.html#module-bindings">bindings</a>
we can do this really easily. LiveView uses the <code>phx-click</code> binding to listen to
click events and send them to the server. In my LiveView layout, I define the
<code>phx-click=&quot;restart-game&quot;</code> binding on the <code>&lt;span&gt;</code> wrapping the face, so that
when the user clicks the face an event is fired. Then, in my LiveView file there
is an equivalent event handler, <code>handle_event(&quot;restart-game&quot;)</code> that will receive
the event and start a new game!</p>

<p>Whenever we’re initializing or updating the state of our application we always
return the socket with our new state attributes using the <code>assign/2</code> and
<code>assign/3</code> function helpers. The assign function helpers take in the existing
socket and a list of key/value state attributes and return the updated socket.
So in the above code snippet, <code>new_game/3</code> is actually just a function that
returns the output of the <code>assign/3</code> function with the new state attributes like
this:</p>

<pre><code>defp new_game(socket, _, _) do
   assign(socket,
      game_status: &quot;alive&quot;,
      ...
   )
end
</code></pre>

<p>And just like that, we’ve created a click event handler that will start a new
game!</p>

<h3 id="advantages-and-disadvantages">Advantages and Disadvantages</h3>

<p>Let’s start off by saying LiveView is super fast. Not only because of the
persistent client connection but LiveView also uses DOM-diffing. When the state
is updated and the page is rerendered, LiveView uses DOM-diffing to update the
page. This prevents the entire page from being rerendered and instead only the
parts of the DOM that have been updated.</p>

<p>LiveView is also nice when you don’t want to have to manage both the client and
the server. By no means is LiveView a replacement for Javascript frameworks that
offer more complex interfaces, however there are instances where you want to
enable real-time user interaction without the large overhead of a framework.
This gives Elixir developers the option to create interactive applications
without having to write or manage any Javascript.</p>

<p>Ironically, LiveView’s best use cases are usually <em>not</em> games. In fact, LiveView
is a little unnecessary in these cases because we’re making server requests when
we might not need to. In my Minesweeper example, I could have written this just
as a simple Javascript application with no concept of a backend. LiveView would
have been more useful in this instance if I had created score keeping. This
would have allowed me to update scores in real time for users. As Chris McCord
said, LiveView’s best uses cases can be seen in</p>

<blockquote>
<p>simple real-time updates, client-side style validations with immediate feedback,
[and] autocomplete inputs</p>
</blockquote>

<p>Lastly, LiveView has no offline capacity and could be a lot of demand on your
host provider. Remember, every instance of your application will be creating a
unique connection from the client which after many connections can either cause
your application to lag or end up just costing you money from your provider.</p>

<hr />

<p>There are a lot of helpful <a href="https://github.com/ivymarkwell/phoenix-liveview-counter-tutorial">step by step
tutorials</a> on
how to get your first LiveView application up and running. Most of the work will
be making your own unique application by updating the LiveView template to
create the view you want and implementing the event handlers that will update
your state.</p>

<p>LiveView is still under active development and so unfortunately some guides are
already becoming outdated. The best way to keep up to date is to follow the
<a href="https://github.com/phoenixframework/phoenix_live_view/blob/master/CHANGELOG.md">changelogs</a>.
There’s already hype (mostly me) around the new command, <code>mix phx.new --live</code>,
which will allow users to quickly initialize a LiveView application. Hopefully
as more updates come out this makes starting your own LiveView project even
easier.</p>

<p>I hope you’re all staying safe during these hard times! Let me know if you have
any feedback in the comments below! I read a lot of other great articles that
helped solidify my understanding of LiveView and am really grateful Elixir has
such an amazing community to learn. As always, you can follow me on
<a href="https://medium.com/@ivymarkwell">Medium</a> and
<a href="https://github.com/ivymarkwell">Github</a> to see what else I’m working on and
thanks for reading. 😊</p>
]]></content>
        </item>
        
        <item>
            <title>Creating a Custom User Confirmation Modal With the React Router Prompt</title>
            <link>https://ivymarkwell.github.io/posts/creating-a-custom-user-confirmation-modal-with-the-react-router-prompt/</link>
            <pubDate>Mon, 16 Sep 2019 15:00:00 -0500</pubDate>
            
            <guid>https://ivymarkwell.github.io/posts/creating-a-custom-user-confirmation-modal-with-the-react-router-prompt/</guid>
            <description>Writing a custom UserConfirmation modal with the React Router Prompt A person up in arms about wanting custom modals in their Prompt component
This is a short walkthrough on how to use React-Router’s v5 Promptcomponent to replace the built in user confirmation window object with your own custom UserConfirmation modal.
There is another really good article about blocking the navigation to prevent the default modal so that we can render our own custom component instead.</description>
            <content type="html"><![CDATA[

<h3 id="writing-a-custom-userconfirmation-modal-with-the-react-router-prompt">Writing a custom UserConfirmation modal with the React Router Prompt</h3>

<p><img src="https://cdn-images-1.medium.com/max/2400/1*lYSWM1q3d5jGuZxGDK6iwQ.jpeg" alt="" />
<span class="figcaption_hack">A person up in arms about wanting custom modals in their Prompt component</span></p>

<p>This is a short walkthrough on how to use React-Router’s v5 <code>Prompt</code>component
to replace the built in user confirmation window object with your own custom
<code>UserConfirmation</code> modal.</p>

<p>There is another really <a href="https://medium.com/@michaelchan_13570/using-react-router-v4-prompt-with-custom-modal-component-ca839f5faf39">good
article</a>
about blocking the navigation to prevent the default modal so that we can render
our own custom component instead. They briefly mention an alternative method
that involves utilizing <code>BrowserRouter</code> and the <code>getUserConfirmation</code> prop,
which is exactly the solution this post covers!</p>

<h3 id="briefly-behind-the-scenes">Briefly Behind the Scenes</h3>

<p>Without going into too much detail, essentially you can trace the <code>Prompt</code>
component all the way through <code>RouterContext</code>, <code>Router</code> and <code>BrowserRouter</code>.</p>

<p><code>BrowserRouter</code> is where the magic begins. Specifically where the history prop
is created on <a href="https://github.com/ReactTraining/react-router/blob/v5.0.0/packages/react-router-dom/modules/BrowserRouter.js">line
11</a>.
<code>react-router</code> uses <code>createBrowserHistory</code> to create our rendered history prop
as an extension of the <code>window.history</code> that’s available in any browser. If you
look in <code>createBrowserHistory</code>, you’ll also see the final layer of our
confirmation window which comes from the initialization of <code>getUserConfirmation</code>
from <code>getConfirmation</code> defined in <code>DomUtils</code>. This is where the default modal
gets defined as a window object.</p>

<pre><code>export function getConfirmation(message, callback) {
   callback(window.confirm(message));
}
</code></pre>

<h3 id="creating-our-custom-userconfirmation-modal">Creating our Custom UserConfirmation modal</h3>

<p>Since we are opting out of the window object and replacing it with our own
custom component, we not only need to render a nicer modal but we also need to
include all of the functionality for canceling and confirming the callback.</p>

<p>Remember that <code>getUserConfirmation</code> is initialized in <code>BrowserRouter</code> and is
what determines what our confirmation modal displays. So wherever you’re
initializing your application with <code>BrowserRouter</code> is where we’re going to pass
our custom component into the <code>getUserConfirmation</code> prop.</p>

<p>And you’re ready to go! You’re now overwriting the default window component and
rendering your own custom <code>UserConfirmation</code> (even if it might not exist yet).</p>

<p>So let’s make it happen!</p>

<pre><code>import React from &quot;react&quot;;
import ReactDOM from &quot;react-dom&quot;;
import { Dialog } from &quot;evergreen-ui&quot;

const UserConfirmation = (message, callback) =&gt; {
   const container = document.createElement(&quot;div&quot;);
   container.setAttribute(&quot;custom-confirmation-navigation&quot;, &quot;&quot;);
   document.body.appendChild(container);

   const closeModal = (callbackState) =&gt; {
      ReactDOM.unmountComponentAtNode(container);
      callback(callbackState);
   };

   ReactDOM.render(
      &lt;Dialog
         cancelLabel=&quot;Cancel&quot;
         confirmLabel=&quot;Confirm&quot;
         isShown={true}
         onCacel={() =&gt; closeModal(false)}
         onConfirm={() =&gt; closeModal(true)}
         title=&quot;Warning&quot;
      &gt;
       {message}
      &lt;/Dialog&gt;,
   container
  );
};

export default UserConfirmation;
</code></pre>

<p>There are a few key things that we needed to happen in our custom component
besides the UI. Since <code>BrowserRouter</code> and our custom component is rendered a
layer above where our normal application is rendered, we start by initializing a
container that we use to directly render the modal. Then we actually define what
the container is rendering.</p>

<p>This is where we create the functionality of closing the modal through either a
cancel or confirm action. In our <code>closeModal</code> function we unmount our manually
rendered component and either push the user to the next location or stay at the
location whether the <code>Prompt</code> was triggered. Fortunately, the callback function
that is passed from <code>Prompt</code> makes sending the user to the next location or
staying on the page really simple for us. All we need to pass <code>callback</code> is a
boolean that tells us whether the user wants to proceed with going to their next
location or doesn’t. So, when the user clicks “Cancel” we can call
<code>callback(false)</code> and likewise when they click “OK” we call <code>callback(true)</code>.</p>

<p>And that’s it! You’re done.</p>

<h3 id="but-i-want-more-than-a-message-and-a-callback">But I want more than a message and a callback</h3>

<p>This is the part where most people would choose another solution because they
want additional customization of the modal that go outside the two props that
are given to us.</p>

<p>Sadly, that is a legitimate concern. We can attempt to alleviate this a little
by a manipulating our <code>message</code> prop. Our <code>Prompt</code> component will only accept a
string into <code>message</code>. So what we can do here is pass in a stringified JSON
object with key-value pairs of things we’d like to have additional control over
and then parse them out later.</p>

<pre><code>&lt;Prompt
   when={when}
   message={
      JSON.stringify(
         `{
           &quot;confirmText&quot;: &quot;Continue&quot;,
           &quot;messageText&quot;: &quot;It looks like you might have some unsaved
                       changes! Are you sure you want to continue?&quot;,
           &quot;cancelText&quot;: &quot;Do not Continue&quot;
          }`
      )
   }
/&gt;
</code></pre>

<p>Then in our <code>UserConfirmation</code> modal instead of using <code>message</code> directly to
display text we need to create a <code>textObj</code> that we use to reference our
customized text keys.</p>

<pre><code>const textObj = JSON.parse(message);

&lt;Dialog
   cancelLabel={textObj.cancelText}
   confirmLabel={textObj.confirmText}
   isShown={true}
   onCacel={() =&gt; closeModal(false)}
   onConfirm={() =&gt; closeModal(true)}
   title=&quot;Warning&quot;
&gt;
   {textObj.messageText}
&lt;/Dialog&gt;
</code></pre>

<p>Now we’re at least going beyond a one dimensional modal that only allows us to
customize the prompt message displayed to the user. Similarly, you could use the
message prop to conditionally determine what to render. If we hadn’t passed for
example a <code>cancelText</code>, then in our Evergreen <code>Dialog</code> we could choose to set
<code>hasCancel</code> to false so we’re only rendering a confirm button and not a close
icon.</p>

<hr />

<p>If you have any questions or feedback please leave a comment below! You can
follow me on <a href="https://medium.com/@ivymarkwell">Medium</a> and
<a href="https://github.com/ivymarkwell">Github</a> to see more fun stuff I’m working on.
Special thanks to <a href="https://medium.com/u/f27d2add6165">Joerg Baier</a> for helping
me work through and understand this solution and many of my other coworkers at
<a href="https://rabbet.com/">Rabbet</a> for giving me helpful feedback on this article.</p>
]]></content>
        </item>
        
        <item>
            <title>Create and Deploying Your First Hugo Site to Github Pages</title>
            <link>https://ivymarkwell.github.io/posts/create-and-deploying-your-first-hugo-site-to-github-pages/</link>
            <pubDate>Sun, 29 Apr 2018 15:00:00 +0000</pubDate>
            
            <guid>https://ivymarkwell.github.io/posts/create-and-deploying-your-first-hugo-site-to-github-pages/</guid>
            <description>Creating and deploying your first Hugo site to Github pages A local duck I photographed recently
This is a comprehensive guide for creating your first static site using Hugo and hosting it on GitHub pages.
Creating your site First, make sure you have Hugo installed on your machine.
Now you can run these commands to make your first site.
And there you go! You’ve created your first Hugo site. I mean, there’s nothing in it, but still!</description>
            <content type="html"><![CDATA[

<h3 id="creating-and-deploying-your-first-hugo-site-to-github-pages">Creating and deploying your first Hugo site to Github pages</h3>

<p><img src="https://cdn-images-1.medium.com/max/2400/1*BDKgDXTBKX3z7x6ij5Z7xQ.jpeg" alt="" />
<span class="figcaption_hack">A local duck I photographed recently</span></p>

<p>This is a comprehensive guide for creating your first static site using Hugo and
hosting it on GitHub pages.</p>

<h3 id="creating-your-site"><strong>Creating your site</strong></h3>

<p>First, make sure you have <a href="https://gohugo.io/getting-started/installing/">Hugo</a>
installed on your machine.</p>

<p>Now you can run these commands to make your first site.</p>

<p>And there you go! You’ve created your first Hugo site. I mean, there’s nothing
in it, but still! Let’s take a look.</p>

<pre><code>hugo server -D
</code></pre>

<p>Your web server by default should be hosted at
<a href="http://localhost:1313/">http://localhost:1313/.</a></p>

<p>There should be nothing here. We have to add themes, content, and lots of other
fun stuff.</p>

<p>If you navigate to <a href="https://themes.gohugo.io/">Hugo,</a> you can see a complete
list of themes that you can use to style your site. In my own personal Hugo site
I, use <a href="https://themes.gohugo.io/minimal/">Minimal</a>, so let’s start there. First
we need to initialize our Github repo, add the theme as a submodule in
<code>themes/minimal</code> and copy the default config file for that theme.</p>

<pre><code>git init
</code></pre>

<p>Now when you host your server, you should notice that you have the exact <a href="https://themes.gohugo.io/theme/minimal/">demo
page</a> shown on the theme’s page.</p>

<p><img src="https://cdn-images-1.medium.com/max/1600/1*fsJe92qbKtKv_BmrjvV_8Q.png" alt="" />
<span class="figcaption_hack">Hugo’s Demo Page</span></p>

<p>Once that is set up, you should be able to customize it! If you navigate back to
our Minimal theme’s documentation page you should find a small guide on using
the parameters to customize the aesthetics of your site.</p>

<p>Once you’re done making your site *beautiful, *you can navigate back to Hugo’s
<a href="https://gohugo.io/getting-started/quick-start/">Getting Started page</a> and
generate actual content for your site. Generating content on your Hugo site is
super important because Hugo won’t generate your subpages unless there is
content to display (or if your content is in <code>draft: true</code>).</p>

<h3 id="deploying"><strong>Deploying</strong></h3>

<p>This is where things get tricky.</p>

<p>Github pages doesn’t natively support Hugo like it does Jekyll (another SSG) so
we’re going to have to create two Github repositories; one to hold your Hugo
site and files, and one to hold the HTML files we have to generate for your
actual Github page to read and render. Once you’ve created your remote repos on
Github <code>&lt;username&gt;.github.io</code> and <code>hugo_site</code> we need to connect them to the
site we just made.</p>

<p>First, let’s sync our repo and our code base and add
<code>&lt;github_username.github.io&gt;</code> as a submodule to our existing repo just like our
theme.</p>

<pre><code>git remote add origin
:&lt;github_username&gt;/hugo_site.git
git add .
git commit -m &quot;Initial commit for our Hugo site.&quot;
</code></pre>

<p>Remember, this only pushes to <code>hugo_site</code> . We still need to generate our html
pages for our <code>&lt;github_username&gt;</code> repo. Hugo already has a built in command,
<code>Hugo</code>, that generates your files to a <code>Public</code> folder. We need to change our
<code>config.toml</code> file to output our HTML files to our submodule
<code>&lt;github_username&gt;.github.io</code>.</p>

<p>Open your <code>config.toml</code>:</p>

<pre><code>baseURL = &quot;
&quot;
languageCode = &quot;en-us&quot;
title = &quot;Minimal&quot;
theme = &quot;minimal&quot;
disqusShortname = &quot;username&quot; # delete this to disable disqus comments
googleAnalytics = &quot;&quot;
publishDir = &quot;&lt;github_username&gt;.github.io&quot;
</code></pre>

<p>The default <code>config.toml</code> for the Minimal theme should look a little like this.
However, here we added in <code>publishDir</code>. This tells Hugo where to create our HTML
files from the content in our Hugo site.</p>

<p>Let’s generate them by running the following command:</p>

<pre><code>hugo
</code></pre>

<p>And that should be it. Hugo already comes built with a simple command to
generate the HTML from any of the customizable content in your site. If you look
in your <code>&lt;github_username&gt;.github.io</code> folder now you should see HTML and CSS
files, stuff that Github pages understands!</p>

<p>Before we finally deploy, we need to make sure our remotes our set up correctly
one last time.</p>

<pre><code>cd &lt;github_username&gt;.github.io
git remote -v
&gt; origin
:&lt;github_username&gt;/&lt;github_username&gt;.github.io.git (fetch)
&gt; origin
:&lt;github_username&gt;/&lt;github_username&gt;.github.io.git (push)
</code></pre>

<p>Now let’s host it!</p>

<pre><code>git add .
git commit -m &quot;Oh my goodness, I'm hosting my first Hugo website!&quot;
git push origin master
</code></pre>

<p>Go to your Github page <code>&lt;github_username&gt;.github.io</code>. You should see your very
own custom Hugo site!</p>

<hr />

<p>If you have any trouble please leave a comment below! You can follow me on
<a href="https://medium.com/@ivymarkwell">Medium</a> and
<a href="https://github.com/ivymarkwell">Github</a> to see more fun stuff I’m working on.
I’m also a moderator of a programming <a href="https://www.twitch.tv/floatingdev">Twitch
channel</a> you can check out to see how small
open source packages are made!</p>

<p>If you want to see what else our engineering team is working on, come <a href="https://www.getambassador.com/culture-outcare?ref=careers">join
us</a> at Ambassador!</p>
]]></content>
        </item>
        
    </channel>
</rss>
